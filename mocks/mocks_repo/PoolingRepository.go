// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/car-pooling/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// PoolingRepository is an autogenerated mock type for the PoolingRepository type
type PoolingRepository struct {
	mock.Mock
}

// DeleteCars provides a mock function with given fields: ctx
func (_m *PoolingRepository) DeleteCars(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteJourneyByID provides a mock function with given fields: ctx, journeyID
func (_m *PoolingRepository) DeleteJourneyByID(ctx context.Context, journeyID int) error {
	ret := _m.Called(ctx, journeyID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, journeyID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteJourneys provides a mock function with given fields: ctx
func (_m *PoolingRepository) DeleteJourneys(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCarByAvailableSeats provides a mock function with given fields: ctx, seats
func (_m *PoolingRepository) GetCarByAvailableSeats(ctx context.Context, seats int) (*model.Car, error) {
	ret := _m.Called(ctx, seats)

	var r0 *model.Car
	if rf, ok := ret.Get(0).(func(context.Context, int) *model.Car); ok {
		r0 = rf(ctx, seats)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Car)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, seats)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCarByID provides a mock function with given fields: ctx, carID
func (_m *PoolingRepository) GetCarByID(ctx context.Context, carID int) (*model.Car, error) {
	ret := _m.Called(ctx, carID)

	var r0 *model.Car
	if rf, ok := ret.Get(0).(func(context.Context, int) *model.Car); ok {
		r0 = rf(ctx, carID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Car)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, carID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetJourneyByID provides a mock function with given fields: ctx, journeyID
func (_m *PoolingRepository) GetJourneyByID(ctx context.Context, journeyID int) (*model.Journey, error) {
	ret := _m.Called(ctx, journeyID)

	var r0 *model.Journey
	if rf, ok := ret.Get(0).(func(context.Context, int) *model.Journey); ok {
		r0 = rf(ctx, journeyID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Journey)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, journeyID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetJourneysByCarID provides a mock function with given fields: ctx, carID
func (_m *PoolingRepository) GetJourneysByCarID(ctx context.Context, carID string) ([]*model.Journey, error) {
	ret := _m.Called(ctx, carID)

	var r0 []*model.Journey
	if rf, ok := ret.Get(0).(func(context.Context, string) []*model.Journey); ok {
		r0 = rf(ctx, carID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Journey)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, carID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertCars provides a mock function with given fields: ctx, cars
func (_m *PoolingRepository) InsertCars(ctx context.Context, cars []*model.Car) error {
	ret := _m.Called(ctx, cars)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []*model.Car) error); ok {
		r0 = rf(ctx, cars)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InsertJourney provides a mock function with given fields: ctx, journey
func (_m *PoolingRepository) InsertJourney(ctx context.Context, journey *model.Journey) error {
	ret := _m.Called(ctx, journey)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Journey) error); ok {
		r0 = rf(ctx, journey)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateCar provides a mock function with given fields: ctx, updatedCar
func (_m *PoolingRepository) UpdateCar(ctx context.Context, updatedCar *model.Car) error {
	ret := _m.Called(ctx, updatedCar)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Car) error); ok {
		r0 = rf(ctx, updatedCar)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateNextPossibleJourney provides a mock function with given fields: ctx, car
func (_m *PoolingRepository) UpdateNextPossibleJourney(ctx context.Context, car *model.Car) (*model.Journey, error) {
	ret := _m.Called(ctx, car)

	var r0 *model.Journey
	if rf, ok := ret.Get(0).(func(context.Context, *model.Car) *model.Journey); ok {
		r0 = rf(ctx, car)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Journey)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *model.Car) error); ok {
		r1 = rf(ctx, car)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type NewPoolingRepositoryT interface {
	mock.TestingT
	Cleanup(func())
}

// NewPoolingRepository creates a new instance of PoolingRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPoolingRepository(t NewPoolingRepositoryT) *PoolingRepository {
	mock := &PoolingRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
