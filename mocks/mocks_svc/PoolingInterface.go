// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/car-pooling/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// PoolingInterface is an autogenerated mock type for the PoolingInterface type
type PoolingInterface struct {
	mock.Mock
}

// PostDropoff provides a mock function with given fields: ctx, journeyID
func (_m *PoolingInterface) PostDropoff(ctx context.Context, journeyID int) (*model.Journey, error) {
	ret := _m.Called(ctx, journeyID)

	var r0 *model.Journey
	if rf, ok := ret.Get(0).(func(context.Context, int) *model.Journey); ok {
		r0 = rf(ctx, journeyID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Journey)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, journeyID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostJourney provides a mock function with given fields: ctx, journey
func (_m *PoolingInterface) PostJourney(ctx context.Context, journey *model.Journey) error {
	ret := _m.Called(ctx, journey)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Journey) error); ok {
		r0 = rf(ctx, journey)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PostLocate provides a mock function with given fields: ctx, journeyID
func (_m *PoolingInterface) PostLocate(ctx context.Context, journeyID int) (*model.Car, error) {
	ret := _m.Called(ctx, journeyID)

	var r0 *model.Car
	if rf, ok := ret.Get(0).(func(context.Context, int) *model.Car); ok {
		r0 = rf(ctx, journeyID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Car)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, journeyID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutCars provides a mock function with given fields: ctx, cars
func (_m *PoolingInterface) PutCars(ctx context.Context, cars []*model.Car) error {
	ret := _m.Called(ctx, cars)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []*model.Car) error); ok {
		r0 = rf(ctx, cars)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type NewPoolingInterfaceT interface {
	mock.TestingT
	Cleanup(func())
}

// NewPoolingInterface creates a new instance of PoolingInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPoolingInterface(t NewPoolingInterfaceT) *PoolingInterface {
	mock := &PoolingInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
